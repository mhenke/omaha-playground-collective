generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user_id           BigInt?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]       @relation("AuthorOfPost")
  photos        Photo[]      @relation("AuthorPhoto")
  playgrounds   Playground[] @relation("AuthorPlayground")
  surfaces      Surface[]    @relation("AuthorSurface")
  ageranges     AgeRange[]   @relation("AuthorAgeRange")
  sessions      Session[]
  Account       Account[]
  role          Role         @default(USER)
}

model Post {
  id           Int         @id @default(autoincrement())
  title        String
  content      String
  author       User        @relation(name: "AuthorOfPost", fields: [authorId], references: [id])
  authorId     String
  photos       Photo[]     @relation("PostPhotos")
  playground   Playground? @relation("PlaygroundPosts", fields: [playgroundId], references: [id])
  playgroundId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  instagram_id String?
}

model Playground {
  id              Int       @id @default(autoincrement())
  name            String
  posts           Post[]    @relation("PlaygroundPosts")
  rating          Float?
  address         String?
  city            String?
  state           String?
  zip             String?
  latitude        Float?
  longitude       Float?
  restrooms       Boolean?
  picnicAreas     Boolean?
  benches         Boolean?
  shade           Boolean?
  accessibleEquip Boolean?
  adaCompliance   Boolean?
  ageRange        AgeRange? @relation(fields: [ageRangeId], references: [id])
  ageRangeId      Int?
  surface         Surface?  @relation(fields: [surfaceId], references: [id])
  surfaceId       Int?
  author          User      @relation(name: "AuthorPlayground", fields: [authorId], references: [id])
  authorId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

model Surface {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  playgrounds Playground[]
  author      User         @relation(name: "AuthorSurface", fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String
  post      Post     @relation("PostPhotos", fields: [postId], references: [id])
  postId    Int
  author    User     @relation("AuthorPhoto", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AgeRange {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  playgrounds Playground[]
  author      User         @relation(name: "AuthorAgeRange", fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}
