// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url = env("DATABASE_URL")
}

model Example {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

// Necessary for Next Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]    @relation("AuthorOfPost")
  sessions      Session[]
  Account       Account[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Update the Post model to have a one-to-one relationship with Playground
model Post {
  id            Int         @id @default(autoincrement())
  title         String
  content       String
  author        User        @relation(name: "AuthorOfPost", fields: [authorId], references: [id])
  authorId      String
  // Update the Post model to have a one-to-one relationship with Playground
  playground    Playground? @relation("PlaygroundPosts")
  playgroundId  Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Update the Photo model to store photos as binary data
model Photo {
  id              Int         @id @default(autoincrement())
  data            Bytes       // Use Bytes type for binary data
  playground      Playground  @relation("PlaygroundPhotos", fields: [playgroundId], references: [id])
  playgroundId    Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// Define the data model for tags
model Tag {
  id            Int         @id @default(autoincrement())
  name          String
  playgrounds   Playground[] @relation("PlaygroundTags")
  playgroundsOnTags   PlaygroundsOnTags[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Define the data model for the many-to-many relationship between Playground and Tag
model PlaygroundsOnTags {
  id            Int         @id @default(autoincrement())
  playground    Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId  Int
  tag           Tag         @relation(fields: [tagId], references: [id])
  tagId         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Playground {
  id                  Int        @id @default(autoincrement())
  post                Post?      @relation("PlaygroundPosts", fields: [postId], references: [id])
  postId              Int?       @unique
  rating              Float?
  address             String?
  city                String?
  state               String?
  zip                 String?
  latitude            Float?
  longitude           Float?
  photos              Photo[]    @relation("PlaygroundPhotos")
  tags                Tag[]      @relation("PlaygroundTags")
  playgroundsOnTags   PlaygroundsOnTags[]
  restrooms           Boolean?
  picnicAreas         Boolean?
  benches             Boolean?
  shade               Boolean?
  accessibleEquip     Boolean?
  adaCompliance       Boolean?
}
